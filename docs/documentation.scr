@begin(section)
@title(API)

The main API consists of two functions: @c(encode) and @c(decode), which are the most important functionallity you'll need to implement a MongoDB driver, like @link[uri="http://euandre.org/cl-MongoDB"](cl-MongoDB).

All complies with the @link[uri="http://bsonspec.org/"](BSON spec).

@begin(section)
@title(Examples)
Setting up with @link[uri="https://www.quicklisp.org/beta/"](Quicklisp) and @link[uri="https://common-lisp.net/project/named-readtables/"](Named-Readtables):
@code[lang=lisp](* (ql:quickload :cl-bson)
; => (:CL-BSON)
* (in-package :cl-bson)
; => #<PACKAGE "CL-BSON">
* (named-readtables:in-readtable bson-syntax)
; => big alist of readtables...
* (enable-printers)
; => NIL
* (decode (encode #d("string" "string"
                     "double" 1.5d0
                     "embedded" #d("embedded" "document"))))
; => #d("string" "string" "double" 1.5d0 "embedded" #d("embedded" "document"))
* (encode #d("my" "document"))
; => #(22 0 0 0 2 109 121 0 9 0 0 0 100 111 99 117 109 101 110 116 0 0)
* (decode *)
; => #d("my" "document")
)
@end(section)

@begin(section)
@title(Main API)
@cl:with-package[name="cl-bson.encode"](@cl:doc(generic encode))
@cl:with-package[name="cl-bson.decode"](@cl:doc(function decode))
@end(section)
@end(section)

@begin(section)
@title(BSON Types)

The @link[uri="http://bsonspec.org/spec.html"](BSON specification) has a few more types than the built-in Common Lisp types. @c(cl-bson) defines classes for those types.

The @c(cl-bson.readtable) package defines the following BSON types/classes:
@begin(list)
@item(@c(<binary-data>) for representing any subtype of the BSON binary data. LINK)
@item(@c(<document>) main class for encoding/decoding. The @c(<document>) class is a wrapper around a @c(hash-table) with custom methods.)
@item(@c(<javascript>) for representing both "JavaScript code" (@c(#x??)) and "JavaScript code with scope" (@c(#x!!)). The @c(<javascript>) class has two slots, @c(code) and @c(scope), so the @c(<javascript>) object will behave differently if the @c(scope) slot is bound or not.)
@item(@c(<mongo-timestamp>) for representing Timestamp LINK that MongoDB uses internally.)
@item(@c(<object-id>) for representing the MongoDB ObjectId. LINK)
@item(@c(<regex>) for representing a regular expression in the document. The @c(<regex>) class has two slots: the actual @c(pattern) and some @c(options).)
@end(list)

It exports all classes slot accessors symbols and classes symbols.

It also exports two custom types: @c(octet) and @c(octets-array).

@begin(section)
  @title(Classes and methods)

  @begin(section)
    @title(<OBJECT-ID>)
    @cl:with-package[name="cl-bson.types"](
      @cl:doc(class <object-id>)
      @cl:doc(generic str)
      @cl:doc(generic get-timestamp)
      @cl:doc(function string->object-id)
      @cl:doc(function generate-object-id)
      @cl:doc(variable *object-id-counter*)
      @cl:doc(function increment-id-counter)
    )
  @end(section)

  @begin(section)
    @title(<REGEX>)
    @cl:with-package[name="cl-bson.types"](
      @cl:doc(class <regex>)
      @cl:doc(function setf options)
      @cl:doc(method initialize-instance)
    )
  @end(section)

  @begin(section)
    @title(<BINARY-DATA>)
    @cl:with-package[name="cl-bson.types"](
      @cl:doc(class <binary-data>)
      @cl:doc(method setf subtype)
      @cl:doc(method initialize-instance)
    )
  @end(section)

  @begin(section)
    @title(<JAVASCRIPT>)
    @cl:with-package[name="cl-bson.types"](
      @cl:doc(class <javascript>)
    )
  @end(section)

  @begin(section)
    @title(<MONGO-TIMESTAMP>)
    @cl:with-package[name="cl-bson.types"](
      @cl:doc(class <mongo-timestamp>)
      @cl:doc(function generate-mongo-timestamp)
      @cl:doc(function increment-mongo-timestamp-counter)
      @cl:doc(variable *mongo-timestamp-counter*)
    )
  @end(section)

  @begin(section)
    @title(<DOCUMENT>)
    @cl:with-package[name="cl-bson.types"](
      @cl:doc(class <document>)
      @cl:doc(function make-document)
      @cl:doc(generic add-element)
      @cl:doc(generic get-element)
      @cl:doc(generic remove-element)
      @cl:doc(generic keys)
    )
  @end(section)

@end(section)
@end(section)

@begin(section)
@title(Encoding and decoding)

@begin(section)
  @title(Encoding)

"This package defines the main function (@c(#'encode)) for actually converting a @c(<document>) object to @c(octets-array) and many helper functions for internal use. @c(*bson-out*) gets bound to a @c(fast-io:output-buffer) in the first to of @c(#'encode)."

  @cl:with-package[name="cl-bson.encode"](
    @cl:doc(generic encode)
    @cl:doc(generic encode-key-value)
    @cl:doc(function encode-document)
    @cl:doc(function encode-cstring)
    @cl:doc(function encode-string)
    @cl:doc(function encode-document-array)
    @cl:doc(function encode-boolean)
    @cl:doc(function encode-int32)
    @cl:doc(function encode-int64)
  )

  @end(section)

@begin(section)
  @title(Decoding)

"This package defines the main function (@c(#'decode)) for converting an @c(octets-array) to BSON @c(<document>)s many helper functions for internal use."

  @cl:with-package[name="cl-bson.decode"](
    @cl:doc(function decode)
    @cl:doc(variable *bson-in*)
    @cl:doc(variable *doc-out*)
    @cl:doc(function decode-key-value)
    @cl:doc(function decode-timestamp)
    @cl:doc(function decode-sequence)
    @cl:doc(variable *bson-sequence-type*)
    @cl:doc(function decode-binary)
    @cl:doc(function decode-javascript)
    @cl:doc(function decode-javascript-w/scope)
    @cl:doc(function decode-regex)
    @cl:doc(function decode-document)
  )
@end(section)
@end(section)


@begin(section)
@title(Readtable)

Package for optional BSON read-print functionality. Uses @link[uri="https://common-lisp.net/project/named-readtables/"](named-readtables) for @cl:spec(*readtable*) manipulation.

Defines read-macros for @c(#d()) (literal @c(<document>)) and for @c(#i()) (literal @c(<document>)).

Also defines @cl:spec(pprint)int behaviour (for consistent read-print equivalence) for @c(#d()) and @c(#i()) read-macros in the @c(bson-syntax) readtable.

All of them are just optional. If you don't like, feel free to not use it =]

@begin(section)
@title(Usage)
@code[lang=lisp](* (make-instance '<regex> :pattern "^abc$" :options "i")
; => #/^abc$/i
* (make-instance '<object-id>)
; => #i(90E08055616E64726568310C67E3D1)
* (make-document)
; => #d("_id" #i(9CE08055616E64726568310C68E3D1))

* (enable-printers)
; => NIL
* (make-instance '<regex> :pattern "^abc$" :options "i")
; => #/^abc$/i
* (make-instance '<object-id>)
; => #i(B4E08055616E64726568310C69E3D1)
* (make-document)
; => #d("_id" #i(B8E08055616E64726568310C6AE3D1))

* (named-readtables:in-readtable bson-syntax)
; big alist of readtables
* #/asdf/li
; => #/asdf/il
* #i(B4E08055616E64726568310C69E3D1)
; => #i(B4E08055616E64726568310C69E3D1)
* #d("my" "doc")
; => #d("my" "doc")
)
@end(section)

@begin(section)
@title(Printer)
  @cl:with-package[name="cl-bson.readtable"](
    @cl:doc(function pprint-bson-document)
    @cl:doc(function pprint-object-id)
    @cl:doc(function enable-bson-document-printer)
    @cl:doc(function enable-object-id-printer)
    @cl:doc(function enable-printers)
    @cl:doc(function disable-bson-document-printer)
    @cl:doc(function disable-object-id-printer)
    @cl:doc(function disable-printers))
@end(section)
@begin(section)
@title(Reader)
  @cl:with-package[name="cl-bson.readtable"](
    @cl:doc(function bson-document-reader)
    @cl:doc(function object-id-reader)
    @cl:doc(macro bson-document-literal)
    @cl:doc(function repeated-keys-p))
@end(section)
@end(section)
